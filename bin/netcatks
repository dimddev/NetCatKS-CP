#/usr/bin/env python

import sys
import os
import json
import imp
import shutil
from datetime import datetime
from colorama import Fore
from collections import OrderedDict

from NetCatKS.Config.api.implementers import TCP, WAMP, WEB, WS

print Fore.RED + """

_///     _//            _//      _//               _//  _//   _//    _// //
_/ _//   _//            _//   _//   _//            _//  _//  _//   _//    _//
_// _//  _//   _//    _/_/ _/_//          _//    _/_/ _/_// _//     _//
_//  _// _// _/   _//   _//  _//        _//  _//   _//  _/ _/         _//
_//   _/ _//_///// _//  _//  _//       _//   _//   _//  _//  _//         _//
_//    _/ //_/          _//   _//   _//_//   _//   _//  _//   _//  _//    _//
_//      _//  _////      _//    _////    _// _///   _// _//     _//  _// //
"""
print Fore.BLUE + "=" * 77

# print '{}'.format(a)


def save_config(__config__):

    with open('config/config.json', 'a') as config_:
        config_.write(json.dumps(__config__, indent=4))
    config_.close()


def dir_exist(pname):

    if os.path.isdir('components/protocols/{}'.format(pname)):

        print Fore.RED + '[ NetCatKS ]: Directory: "components/protocols/{}" exist'.format(pname)
        return True

    else:
        return False


def __directory_checker(_protocol_name):

    new_name_prompt = dir_exist(_protocol_name)

    if new_name_prompt:

        new_name_prompt = raw_input(Fore.CYAN + '[ NetCatKS ]: Enter your new protocol name: ')

        if not new_name_prompt:
            return False

        else:

            return __directory_checker(new_name_prompt)
    else:

        return _protocol_name


def cleaningup(clean_path):

    print Fore.RED + '[ NetCatKS ]: Cleaning up... {}'.format(clean_path)

    try:

        shutil.rmtree(clean_path)

    except IOError as ioe:

        print Fore.RED + ioe.message
        sys.exit(1)

    else:
        return True


def create_protocol_dir(protocol_name):

    dir_ = 'components/protocols/{}'.format(protocol_name)

    print Fore.GREEN + '[ NetCatKS ]: Creating directory: {}'.format(dir_)

    try:

        os.makedirs(dir_, 0755)

    except OSError as e:

        print Fore.RED + e.message

        sys.exit(1)

    else:
        return dir_


def protocols_prompt(protocols):

    while True:

        name = raw_input(Fore.CYAN + '[ NetCatKS ]: Enter sub protocol name: ')

        if not name:
            break

        new_name = {name: []}
        protocols['config'].update(new_name)

        while True:

            attrib = raw_input(Fore.CYAN + '[ NetCatKS ]: Enter attribute name: ')

            if not attrib:
                break

            attrib_type = raw_input(Fore.CYAN + '[ NetCatKS ]: Enter attribute type [None]: ')

            protocols['config'][name].append((attrib, attrib_type or None, ))

    return protocols


def make_protocols(protocol_name):

    protocols = OrderedDict(config=OrderedDict())
    main_protocol = None

    if not os.path.isdir('components/protocols'):

        print Fore.RED + '[ NetCatKS ]: Error: components/protocols does not exist...'
        print Fore.YELLOW + '[ NetCatKS ]: You have to initialize first your project tree'
        sys.exit(1)

    protocol_name = __directory_checker(protocol_name)

    if not protocol_name:
        sys.exit(1)

    dir_ = create_protocol_dir(protocol_name)

    protocols = protocols_prompt(protocols)

    __all = []

    head = """from __future__ import absolute_import

from zope.interface import Interface, Attribute, implementer

from NetCatKS.DProtocol import BaseProtocolActions
from NetCatKS.Components import IJSONResource, RequestSubscriber

__author__ = 'NetCatKS auto generator at {}'
    """.format(str(datetime.now()))

    __all.append(head)

    __protos = []

    for proto, attributes in protocols.get('config').iteritems():

        __protos.append(proto)

        __interface_base = """

class I{}Interface(Interface):
        """.format(proto)

        __all.append(__interface_base)

        for name, intype in attributes:
            att_str = """
    {} = Attribute("Comments going here")
        """.format(name)

            __all.append(att_str)

        __cls_base = """

@implementer(I{}Interface)
class {}Implementer(BaseProtocolActions):

    def __init__(self, **kwargs):
        """.format(proto, proto)

        __all.append(__cls_base)

        __imp_base = ""
        __prop_names = ""
        __prop_names_set = ""

        for name, intype in attributes:

            if intype in __protos:
                intype = '{}Implementer()'.format(intype)

            __imp_base += """
        self.__{} = {}
        """.format(name, intype)

            if intype != '[]':
                __prop_names += """
    @property
    def {0}(self):
        return self.__{0}

    @{0}.setter
    def {0}(self, {0}):
        self.__{0} = {0}
            """.format(name)
            else:

                __prop_names += """
    @property
    def {0}(self):
        return self.__{0}

    @{0}.setter
    def {0}(self, {0}):
        self.__{0} = self.if_list_auto_append({0}, self.__{0})
                """.format(name)

        __all.append(__imp_base)
        __all.append(__prop_names)

        if proto == protocols.get('config').keys()[-1]:
            main_protocol = proto
            __main_proto = """

@implementer(IJSONResource)
class {0}Protocol({0}Implementer, RequestSubscriber):

    def __init__(self, **kwargs):

        super({0}Protocol, self).__init__(**kwargs)
""".format(proto)

            __all.append(__main_proto)

    to_str = ''

    for s in __all:
        to_str += s

    print Fore.BLUE + "=" * 77
    print Fore.GREEN + '[ NetCatKS ]: Generate a DProtocol structure\n'

    print Fore.WHITE + to_str

    print Fore.BLUE + "=" * 77 + '\n'

    with open('{}/__init__.py'.format(dir_), 'a') as app:
        app.write(to_str)

    app.close()

    path = 'components/protocols/{}/'.format(protocol_name)
    fname = 'components/protocols/{}/__init__.py'.format(protocol_name)

    try:

        print Fore.GREEN + '[ NetCatKS ]: Trying to load module components.protocols.{}.{}'.format(protocol_name, main_protocol)
        load = imp.load_source(path, fname)

    except IOError as e_load:

        print Fore.RED + '[ NetCatKS ]:Failed to load module: components.protocols.{}.{}'.format(protocol_name, main_protocol)
        print Fore.RED + '[ NetCatKS ]: ERROR: {}'.format(e_load.message)

        cleaningup(path)
        sys.exit(1)

    except Exception as e:

        print Fore.RED + e.message
        cleaningup(path)
        sys.exit(1)

    else:

        try:

            proto_load = getattr(load, '{}Protocol'.format(main_protocol))()

        except Exception as e:

            print Fore.RED + e.message
            cleaningup(path)
            sys.exit(1)

        else:

            print Fore.GREEN + '[ NetCatKS ]: JSON Signature looks like:\n'
            print Fore.CYAN + proto_load.to_json(indent=4)

            if len(proto_load.to_dict().keys()) > 1:

                print 'A non root API, not implemented yet...\n'

            else:
                __root_api = """
from NetCatKS.Logger import Logger
from NetCatKS.Components import BaseRootAPI


class {0}(BaseRootAPI):

    def __init__(self, factory):

        super({0}, self).__init__(factory)

        self.factory = factory
        self.logger = Logger()

    def process_factory(self):

        self.logger.debug(self.factory.to_dict())
        return self.factory

""".format(proto_load.to_dict().keys()[0].capitalize())

                api_path = 'components/adapters/{}'.format(protocol_name)

                if os.path.isdir(api_path):

                    print Fore.RED + '[ NetCatKS ]: ERROR: path {} exist'.format(api_path)
                    sys.exit(1)

                else:

                    try:

                        os.mkdir(api_path)

                    except OSError as e:

                        print Fore.RED + '[ NetCatKS ]: ERROR: cannot create directory {} {}'.format(
                            api_path, e
                        )

                        sys.exit(1)

                    else:

                        print 'components/adapters/{}/__init__.py'.format(protocol_name)

                        with open('components/adapters/{}/__init__.py'.format(protocol_name), 'a') as aapp:
                            aapp.write(__root_api)

                        aapp.close()

                        print Fore.BLUE + "=" * 77 + '\n'

                        print Fore.GREEN + '[ NetCatKS ]: Create a Root API for the above schema...\n'
                        print Fore.WHITE + __root_api

                        print Fore.BLUE + "=" * 77 + '\n'

    return


def tcp_config(tcp_conf):

    tcp = TCP()

    tcp_conf.update({'TCP': tcp.to_dict()})

    return tcp_conf


def ws_config(ws_conf):

    ws = WS()

    ws_conf.update({'WS': ws.to_dict()})

    return ws_conf


def web_config(web_conf):

    web = WEB()

    web_conf.update({'WEB': web.to_dict()})

    return web_conf


def wamp_config(wamp_conf):

    wamp = WAMP()

    wamp_conf.update({

        'WAMP': wamp.to_dict()
    })

    return wamp_conf


def global_sub():

    gsub = """

from NetCatKS.Components.api import IUserGlobalSubscriber, IJSONResource

from zope.interface import implementer
from zope.component import adapts


@implementer(IUserGlobalSubscriber)
class GlobalSubscriberCallBack(object):

    adapts(IJSONResource)

    def __init__(self, adapt=None):
        self.adapt = adapt

    def subscribe(self):
        print 'MESSAGE FROM GLOBAL SUB CALLBACK: {}'.format(self.adapt)
    """

    with open('components/wamp/sub/__init__.py', 'a') as app:

        app.write(gsub)

    app.close()


def create_project_tree():

    dirs = [
        'components/factories',
        'components/adapters',
        'components/protocols',
        'components/utility',
        'components/validators',
        'components/wamp/rpc',
        'components/wamp/pub',
        'components/wamp/sub',
        'components/ws'
    ]

    print '\n'

    for d in dirs:

        try:

            os.makedirs(d, 0755)
            open(d + '/__init__.py', 'a').close()

            print Fore.GREEN + '[ NetCatKS ]: Module {} was created successfully'.format(d)

        except OSError as e:
            print Fore.RED + '{}'.format(e)
            sys.exit(1)

        else:

            open(d + '/../__init__.py', 'a').close()
            open('components/__init__.py', 'a').close()

    try:

        os.mkdir('config')
        print Fore.GREEN + '[ NetCatKS ]: The config directory "config" was created successfully'

    except OSError as e:

        print Fore.RED + '{}'.format(e)
        sys.exit(1)


def successfully_response():
    print Fore.CYAN + '\n[ NetCatKS ]: Project structures was created successfully\n'
    print Fore.BLUE + '[ NetCatKS ]: Next step is creation of a DProtocol structure'
    print Fore.BLUE + '[ NetCatKS ]: netcatks init protocol <protocol_name>\n'

try:

    arg = sys.argv[1]

except IndexError:

    print '\n[ NetCatKS ]: Usage:\n'

    print Fore.CYAN + ':~$ netcatks init tcp' + Fore.WHITE + ' - will produce a default TCP Server'
    print Fore.CYAN + ':~$ netcatks init web' + Fore.WHITE + ' - will produce a default WEB Server'
    print Fore.CYAN + ':~$ netcatks init ws' + Fore.WHITE + ' - will produce a default WS Server'
    print Fore.CYAN + ':~$ netcatks init wamp' + Fore.WHITE + ' - will produce a default Wamp Component'
    print Fore.CYAN + ':~$ netcatks init mixin' + Fore.WHITE + ' - will produce all together TCP and WEB Server plus Default Wamp Component'
    print Fore.CYAN + ':~$ netcatks init protocol <protocol name>' + Fore.WHITE + ' - will generate DProtocol structure or Message protocol or TDO'

else:

    if arg == 'init' and sys.argv[2] != 'protocol':

        create_project_tree()

__config = dict()

try:

    arg = sys.argv[2]

except IndexError:
    pass

else:

    if arg == 'ws':

        __config.update(ws_config(__config))

        ws_app = """
from NetCatKS.Components import ComponentsRegistration
from NetCatKS.NetCAT import IDefaultWSService, DefaultWSFactory

components = ComponentsRegistration().init()

application = IDefaultWSService(
    DefaultWSFactory(config=components.config.get_ws())
).start()
"""

        with open('app.py', 'a') as app:

            app.write(ws_app)

        app.close()
        save_config(__config)

        successfully_response()

    elif arg == 'wamp':

        __config.update(wamp_config(__config))

        wamp_app = """
from NetCatKS.Components import ComponentsRegistration
from NetCatKS.NetCAT import IDefaultAutobahnService, AutobahnDefaultFactory

components = ComponentsRegistration().init()

application = IDefaultAutobahnService(
    AutobahnDefaultFactory(config=components.config.get_wamp())
).start()
"""

        with open('app.py', 'a') as app:

            app.write(wamp_app)

        app.close()
        save_config(__config)
        global_sub()

        successfully_response()

    elif arg == 'tcp':

        __config.update(tcp_config(__config))

        tcp_app = """
from NetCatKS.Components import ComponentsRegistration
from NetCatKS.NetCAT import DefaultFactory, IDefaultService

components = ComponentsRegistration().init()

application = IDefaultService(
    DefaultFactory(config=components.config.get_tcp())
).start()
"""

        with open('app.py', 'a') as app:

            app.write(tcp_app)

        app.close()
        save_config(__config)
        successfully_response()

    elif arg == 'web':

        __config.update(web_config(__config))

        web_app = """
from NetCatKS.Components import ComponentsRegistration
from NetCatKS.NetCAT import IDefaultWebService, DefaultWebFactory

components = ComponentsRegistration().init()

application = IDefaultWebService(
    DefaultWebFactory(config=components.config.get_web())
).start()
"""

        with open('app.py', 'a') as app:

            app.write(web_app)

        app.close()
        save_config(__config)

        successfully_response()

    elif arg == 'mixin':

        __config.update(wamp_config(__config))
        __config.update(tcp_config(__config))
        __config.update(web_config(__config))
        __config.update(ws_config(__config))

        mixin_app = """
from twisted.application import service

from NetCatKS.Components import ComponentsRegistration
from NetCatKS.NetCAT import IDefaultWebService, DefaultWebFactory
from NetCatKS.NetCAT import DefaultFactory, IDefaultService
from NetCatKS.NetCAT import IDefaultAutobahnService, AutobahnDefaultFactory
from NetCatKS.NetCAT import IDefaultWSService, DefaultWSFactory

components = ComponentsRegistration().init()

multi_service = service.MultiService()

apps = [

    IDefaultService(DefaultFactory(
        config=components.config.get_tcp(),
        belong_to=multi_service
    )),

    IDefaultAutobahnService(AutobahnDefaultFactory(
        config=components.config.get_wamp(),
        belong_to=multi_service
    )),

    IDefaultWebService(DefaultWebFactory(
        config=components.config.get_web(),
        belong_to=multi_service
    )),

    IDefaultWSService(DefaultWSFactory(
        config=components.config.get_ws(),
        belong_to=multi_service
    ))
]

for app in apps:
    app.start()

application = service.Application("NetCatKS DEMO")
multi_service.setServiceParent(application)
"""

        with open('app.py', 'a') as app:

            app.write(mixin_app)

        app.close()

        global_sub()
        save_config(__config)

        successfully_response()

    elif arg == 'protocol':

        try:

            proto_name = sys.argv[3]

        except IndexError:

            print 'Usage:'
            print '\tnetcatks init protocol <protocol name> - Will produce a input screen'

            sys.exit(1)

        else:
            make_protocols(proto_name)

    else:

        print 'Incorrect parameter: {}'.format(arg)
